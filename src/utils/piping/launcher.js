/* eslint-disable import/no-dynamic-require */
// Generated by CoffeeScript 1.10.0
const launcher = () => {
  const indexOf = [].indexOf || function _indexOf(item) {
    for (let i = 0, l = this.length; i < l; i += 1) {
      if (i in this && this[i] === item) return i;
    }
    return -1;
  };

  const cluster = require('cluster');

  const path = require('path');

  const natives = ['assert', 'buffer', 'child_process', 'cluster',
    'console', 'constants', 'crypto', 'dgram', 'dns', 'domain', 'events',
    'freelist', 'fs', 'http', 'https', 'module', 'net', 'os', 'path', 'punycode',
    'querystring', 'readline', 'repl', 'stream', 'string_decoder', 'sys', 'timers',
    'tls', 'tty', 'url', 'util', 'vm', 'zlib'];

  const languages = {
    '.coffee': 'coffee-script'
  };

  cluster.worker.on('message', options => {
    let _loadOrig; let
      module;
    const main = path.resolve(process.cwd(), options.main);
    if (options.hook) {
      module = require('module');
      _loadOrig = module._load;
      module._load = (name, parent, isMain) => {
        const file = module._resolveFilename(name, parent);
        if (options.includeModules || file.indexOf('node_modules') === -1) {
          if (!(indexOf.call(natives, file) >= 0 || file === main)) {
            cluster.worker.send({
              file
            });
          }
        }
        return _loadOrig(name, parent, isMain);
      };
    }
    const ext = path.extname(options.main);
    if (languages[ext]) {
      require(languages[ext]);
    }
    if (options.language) {
      require(options.language);
    }
    return require(main);
  });

  process.on('uncaughtException', err => {
    cluster.worker.send({
      err: (err != null ? err.stack : undefined) || err
    });
    return cluster.worker.kill();
  });
};

launcher.call(this);
